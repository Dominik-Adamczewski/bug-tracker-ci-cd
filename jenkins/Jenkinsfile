pipeline {
  agent any
    
  environment {  // to temat związany bezpośrednio z tym GO jeżeli chodzi o testy Backendowe
      GOCACHE = "${WORKSPACE}/.cache/go-build"
      GOPATH = "${WORKSPACE}/.go"
  }

  stages {
    stage('Execute Unit Tests') {
      parallel {
        stage('Unit Tests - Backend') {  // stages - tutaj wydzielamy konkretne jobs które mają być zrobione, czyli BE testy, FE testy itd.
          agent {  // jeżeli jest potrzeba zaciągnąć obraz dockerowy, żeby odpalić jakieś testy to robi się to w agent
            docker {
              image 'snakee/golang-junit:1.21'
              reuseNode true
            }
          }
          steps {
            dir('bugtracker-backend') {  // definiujemy folder, gdzie będą odpalane testy i potem w sh definiujemy shell command który je odpala
               sh '''
                   mkdir -p ${GOCACHE}
                   mkdir -p ${GOPATH}
                   go test -v ./... 2>&1 | go-junit-report > test-results.xml

                   # Generate coverage report
                   go test -coverprofile=coverage.out -covermode=atomic ./...
                   go tool cover -html=coverage.out -o coverage.html

                   mkdir -p reports
                   mv coverage.html reports/
               '''
            }
          }
          post {
            always {
              junit 'bugtracker-backend/test-results.xml'
              publishHTML target: [
                reportDir: 'bugtracker-backend/reports',
                reportFiles: 'coverage.html',
                reportName: 'Backend Coverage Report'
              ]
            }
          }
        }
        stage('Unit tests - Frontend') {
          agent {
            docker {
              image 'node:20-alpine'
              reuseNode true
            }
          }
          steps {
            dir('bugtracker-frontend') {
              sh '''
                  npm ci
                  npm test
                  mkdir -p reports
                  mv coverage reports/
              '''
            }
          }
          post { // post działa w taki sposób, że będzie odpalony po wszystkich steps które zrobimy
            always {  // to definuje, że bd odpalali ten kawałek pipelina zawsze - nawet jak jakiś test u góry w którymś stepie zfailuje
              junit 'bugtracker-frontend/test-results.xml'
              publishHTML target: [
                reportDir: 'bugtracker-frontend/reports/coverage',
                reportFiles: 'index.html',
                reportName: 'Frontend Coverage Report'
              ]
            }
          }
        }
      }
    }
    stage('Launch application') {
      agent {
        docker {
          image 'docker:27.5.1'
          reuseNode true
          args '-v /var/run/docker.sock:/var/run/docker.sock -u 0'
        }
      }
      steps {
        sh 'docker compose up --build -d'
      }
    }
    stage('API Tests') {
      agent {
        docker {
          image 'mcr.microsoft.com/playwright:v1.56.1-noble'
          reuseNode true
          args '-u 0 --network=host'
        }
      }
      steps {
        dir('tests-api') {
          sh 'npx wait-port http://localhost:8080/api/health -t 30000'

          sh 'npm ci'
          sh 'npx playwright test'
        }
      }
      post {
        always {
          junit 'tests-api/test-results/results.xml'
          publishHTML target: [
            reportDir: 'tests-api/playwright-report',
            reportFiles: 'index.html',
            reportName: 'Playwright API Test Report'
          ]
        }
      }
    }
    stage('E2E Tests') {
      agent {
        docker {
          image 'mcr.microsoft.com/playwright:v1.56.1-noble'
          reuseNode true
          args '-u 0 --network=host'
        }
      }
      steps {
        dir('tests-e2e') {
          sh 'npm ci'
          sh 'npx playwright test'
        }
      }
    }
  }
  post {
    always { // w ten sposób czyścimy workspace
      cleanWs()
    }
  }
}